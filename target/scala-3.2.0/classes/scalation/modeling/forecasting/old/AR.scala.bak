
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  Hao Peng, John Miller, Michael Cotterell
 *  @version 2.0
 *  @date    Sat Jun 13 01:27:00 EST 2017
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   Model: Auto-Regressive
 *
 *  @see     http://en.wikipedia.org/wiki/Autoregressive%E2%80%93moving-average_model
 *  @see     http://www.emu.edu.tr/mbalcilar/teaching2007/econ604/lecture_notes.htm
 *  @see     http://www.stat.berkeley.edu/~bartlett/courses/153-fall2010
 *  @see     http://www.princeton.edu/~apapanic/ORFE_405,_Financial_Time_Series_%28Fall_2011%29_files/slides12-13.pdf
 */

package scalation
package modeling
package forecasting

import scala.collection.mutable.Set
import scala.math.{max, min}

import scalation.mathstat._
import scalation.random.{Normal, Uniform}

import Fit._

// FIX - don't use actual y values for first p predictions - compare with ARIMA

import AR._
import Forecaster._

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `AR` class provides basic time series analysis capabilities for Auto-Regressive
 *  (AR) models.  In an AR(p) model, p refers to the order of the Auto-Regressive
 *  components of the model.  AR models are often used for forecasting.
 *  Given time series data stored in vector y, its next value y_t = y(t)
 *  may be predicted based on prior values of y and its noise:
 *      y_t = δ + Σ(φ_k y_t-k)
 *  where δ is a constant, φ is the autoregressive coefficient vector,
 *  and e is the noise vector.
 *----------------------------------------------------------------------------------
 *  @param y       the response vector (time-series data)
 *  @param tt      the time vector, if relevant (time index may suffice)
 *  @param hparam  the hyper-parameters
 */
class AR (y: VectorD, tt: VectorD = null, hparam: HyperParameter = AR.hp)
      extends Forecaster (y, tt, hparam)
         with Correlogram (y)
         with Fit (dfm = hparam("p").toInt, df = y.dim - hparam("p").toInt):

    private val debug   = debugf ("AR", true)                            // debug function
    private val flaw    = flawf ("AR")                                   // flaw function
    private var m       = y.dim                                          // number of time points
    private var p       = hparam("p").toInt                              // p-th order Auto-Regressive model
    private var φ       = VectorD.nullv                                  // AR(p) parameters/coefficients
    private var δ       = NO_DOUBLE                                      // drift/constant term
    private var trained = false                                          // has trained been called?

    if p > MAX_LAGS then flaw ("AR", s"p = $p must not be greater than MAX_LAGS = $MAX_LAGS")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the model name including its current hyper-parameter, e.g., AR(2).
     */
    override def modelName: String = s"AR($p)"

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Train/fit an `AR` model to the times-series data in vector y_.
     *  Estimate the coefficient vector φ for a p-th order Auto-Regressive AR(p) model.
     *      z_t = φ_0 * z_t-1 + ... + φ_p-1 * z_t-p + e_t
     *  Uses the Durbin-Levinson Algorithm to determine the coefficients.
     *  The φ vector is p-th row of 'psi' matrix (ignoring the first (0th) column).
     *  @param x_null  the data/input matrix (ignored)
     *  @param y_      the training/full response vector (defaults to y)
     */
    def train (x_null: MatrixD = null, y_ : VectorD = y): Unit = 
        m = y_.dim
        resetDF (p, m - p)
        makeCorrelogram (y_)
        φ = psiM(p)(1 to p+1)
        δ = statsF.mu * (1 - φ.sum)
        trained = true
        debug ("train", s"parameters for AR($p) model: φ = $φ, δ = $δ")
    end train

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Retrain/fit an `AR` model to the times-series data using another order p_
     *  Estimate the coefficient vector φ for a p-th order Auto-Regressive AR(p) model.
     *  The φ vector is p-th row of psi matrix (ignoring the first (0th) column).
     *  @param p_  another order
     */
    def retrain (p_ : Int): Unit =
        if ! trained then flaw ("retrain", "train must be called before retrain")
        p = p_
        resetDF (p, m - p)
        φ = psiM(p)(1 to p+1)
        δ = statsF.mu * (1 - φ.sum)
        debug ("retrain", s"parameters for AR($p) model: φ = $φ, δ = $δ")
    end retrain

   //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Test an AR forecasting model y_ = f(lags (y_)) + e and return its QoF vector.
     *  Testing may be be in-sample (on the training set) or out-of-sample
     *  (on the testing set) as determined by the parameters passed in.
     *  Note: must call train before test.
     *  @param x_null  the training/testing data/input matrix (ignored, pass null)
     *  @param y_      the training/testing response/output vector (defaults to full y)
     */
    def test (x_null: MatrixD = null, y_ : VectorD = y): VectorD =
        val yp = predictAll (y_)                                         // make predictions
        val (y1, y2) = align (y_, yp)
        diagnose (y1, y2)                                                // evaluate the quality of these predictions
        fit                                                              // return the QoF vector
    end test

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the parameter vector.
     */
    def parameter: VectorD = φ

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Predict a value for time point t using 1-step ahead forecasts.
     *      y_t  =  φ_0 y_t-1 + φ_1 y_t-2 + ... + φ_p-1 y_t-p
     *  When k < 0 let y_k = y_0 (assume first value repeats).
     *  @param tn  the time point (index) to be predicted
     *  @param y_  the actual values to use in making predictions
     */
    def predict (t: Int, y_ : VectorD): Double =
        if t < 1 || t > y_.dim then flaw ("predict", s"time index t = $t is out of range")
        var sum = δ
        for j <- 0 until p do sum += φ(j) * y_(max (0, t-1-j))
        sum
    end predict

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Predict values for all time points using 1-step ahead forecasts.
     *  Return a vector that is the predictions (zero-centered) of a p-th order
     *  Auto-Regressive AR(p) model.
     *  @see predictAll in `ForecasterVec` for uncentered results
    def predictAllz (): VectorD = 
        val zp = new VectorD (m)                                         // forecasts for all time points t 
        for t <- 0 until p do zp(t) = z(t)                                // copy first p actual values into zp
        for t <- p until m do
             var sum = 0.0
             for j <- 0 until p do sum += φ(j) * zp(max (0, t-1-j))
             zp(t) = sum
        end for
        zp                                                               // return vector of predicted values
    end predictAllz
     */

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Forecast values for all m time points and all horizons (1 through h-steps ahead).
     *  Record these in the yf matrix, where
     *      yf(t, k) = k-steps ahead forecast for y_t
     *  Note, yf(?, 0) is set to y (the actual time-series values).
     *  @param h  the maximum forecasting horizon, number of steps ahead to produce forecasts
     */
    def forecastAll (h: Int): MatrixD =
        val yf = new MatrixD (m, h+1)                                        // forecasts for all time points t & horizons to h
        yf(?, 0) = y                                                     // first column is actual values, horizon 0
        for k <- 1 to h do
            val c = min (k, p)                                           // cut point from actual to forecasted values
            for t <- 0 until c do yf(t, k) = y(t)                         // copy first c actual values
            for t <- c until m do                                       // forecast the rest
                 var sum = δ
                 for j <- 0 until p do sum += φ(j) * yf(max (0, t-1-j), max (0, k-1-j))
                 yf(t, k) = sum
            end for
            debug ("forecastAll", s"yf(?, $k) = ${yf(?, k)}")
        end for
        yf                                                               // return matrix of forecasted values
    end forecastAll

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Produce h-steps ahead forecast on the testing data during cross validation.
     *  @param y  the current response vector
     *  @param t  the time point to be forecast
     *  @param h  the forecasting horizon, number of steps ahead to produce forecast
    override def forecastX (y: VectorD = y, t: Int = y.dim, h: Int = 1): Double =
        if t > m then flaw ("forecast", "no forecasts with starting t > m are provided")

        val zf = new VectorD (p+h)
        // Must calculate the z values by doing y - mu on the fly because these values are beyond the bounds of the z vector
        for l <- 0 until p do zf(l) = y(max (0, t-p+l)) - stats.mu        // copy first p values into zf.
 
        for k <- 1 to h do                                                // advance the forecasting horizon
            var sum = 0.0
            for j <- 0 until p do sum += φ(j) * zf(p-2+k-j)
            zf(p-1+k) = sum
        end for
        zf.last + stats.mu                                               // return the last forecast
    end forecastX
     */

end AR


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `AR` companion object provides factory methods for the `AR` class.
 */
object AR:

    /** Base hyper-parameter specification for `AR`
     */
    val hp = new HyperParameter
    hp += ("p", 1, 1)                                                    // for the AR part

    private val flaw   = flawf ("AR")                                    // flaw function

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create an `AR` object.
     *  @param y       the response vector (time series data)
     *  @param tt      the time vector, if relevant (time index may suffice)
     *  @param hparam  the hyper-parameters
     */
    def apply (y: VectorD, tt: VectorD = null, hparam: HyperParameter = AR.hp): AR = 
        new AR (y, tt, hparam)
    end apply

end AR


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ARTest` object is used to test the `AR` class on real data: Forecasting lake
 *  levels.  Test the test and predictAll methods over the whole times-series.
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting.ARTest
 */
object ARTest extends App:

    import Example_LakeLevels.y
    val t = VectorD.range (1, y.dim)
 
    var ar: AR = null
    for p <- 1 to 11 do                                             // autoregressive hyper-parameter
        hp("p") = p                                                 // set p hyper-parameter
        banner (s"Test: AR($p)")
        ar = new AR (y)                                             // create model for time series data
        ar.train ()                                                 // train the model on full dataset
        println (ar.report (ar.test ()))                            // test the model and report results
        val yp = ar.predictAll (y)                                  // predict 1-step ahead for all y
        val (y1, y2) = align (y, yp)                                // compare y(1:m) with yp(0:m-1)
        new Plot (t, y1, y2, s"AR($p): y-actual vs. y-predicted", lines = true)
    end for

    banner ("Select model based on ACF and PACF")
    ar.plotFunc (ar.acF, "ACF")
    ar.plotFunc (ar.pacF, "PACF")

end ARTest

