
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  Hao Peng, John Miller, Michael Cotterell
 *  @version 2.0
 *  @date    Sat Jun 13 01:27:00 EST 2017
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   Model: Auto-Regressive (AR)
 *
 *  @see     http://en.wikipedia.org/wiki/Autoregressive%E2%80%93moving-average_model
 *  @see     http://www.emu.edu.tr/mbalcilar/teaching2007/econ604/lecture_notes.htm
 *  @see     http://www.stat.berkeley.edu/~bartlett/courses/153-fall2010
 *  @see     http://www.princeton.edu/~apapanic/ORFE_405,_Financial_Time_Series_%28Fall_2011%29_files/slides12-13.pdf
 */

package scalation
package modeling
package forecasting

import scala.math.max

import scalation.mathstat._

import AR.hp

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `AR` class provides basic time series analysis capabilities for Auto-Regressive
 *  (AR) models.  In an AR(p) model, p refers to the order of the Auto-Regressive
 *  components of the model.  AR models are often used for forecasting.
 *  Given time-series data stored in vector y, its next value y_t = y(t)
 *  may be predicted based on prior values of y and its noise:
 *      y_t = δ + Σ(φ_k y_t-k) + e_t
 *  where δ is a constant, φ is the auto-regressive coefficient vector,
 *  and e_t is the noise term.
 *----------------------------------------------------------------------------------
 *  @param y       the response vector (time-series data)
 *  @param tt      the time vector, if relevant (time index may suffice)
 *  @param hparam  the hyper-parameters
 */
abstract class AR (y: VectorD, tt: VectorD = null, hparam: HyperParameter = AR.hp)
      extends Forecaster (y, tt, hparam)
         with Correlogram (y)
         with Fit (dfm = hparam("p").toInt, df = y.dim - hparam("p").toInt):

    private val debug = debugf ("AR", true)                            // debug function
    private val flaw  = flawf ("AR")                                   // flaw function

                m     = y.dim                                          // number of time points (@see `FitM`)
    private var p     = hparam("p").toInt                              // p-th order Auto-Regressive model
    private var φ     = VectorD.nullv                                  // AR(p) parameters/coefficients
    private var δ     = NO_DOUBLE                                      // drift/intercept/constant term
    private var yf    = MatrixD.nullm                                  // the forecast matrix - time points x horizons

    if p > MAX_LAGS then flaw ("init", s"p = $p must not be greater than MAX_LAGS = $MAX_LAGS")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the model name including its current hyper-parameter, e.g., AR(2).
     */
    override def modelName: String = s"AR($p)"

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Train/fit an `AR` model to the times-series data in vector y_.
     *  Estimate the coefficient vector φ for a p-th order Auto-Regressive AR(p) model.
     *  Uses Durbin-Levinson Algorithm (in `Correlogram`) to determine the coefficients.
     *  The φ vector is p-th row of psi matrix (ignoring the first (0th) column).
     *  @param x_null  the data/input matrix (ignored, pass null)
     *  @param y_      the training/full response vector (e.g., full y)
     */
    def train (x_null: MatrixD, y_ : VectorD): Unit = 
        m = y_.dim                                                     // length of relevant time-series
        resetDF (p, m - p)                                             // reset the degrees of freedom
        makeCorrelogram (y_)                                           // correlogram computes psi matrix
        φ = psiM(p)(1 to p+1)                                          // coefficients = p-th row, columns 1, 2, ... p
        δ = statsF.mu * (1 - φ.sum)                                    // compute drift/intercept
        debug ("train", s"parameters for AR($p) model: φ = $φ, δ = $δ")
    end train

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Test PREDICTIONS of an AR forecasting model y_ = f(lags (y_)) + e and return its
     *  QoF vector.  Testing may be be in-sample (on the training set) or out-of-sample
     *  (on the testing set) as determined by the parameters passed in.
     *  Note: must call train before test.
     *  @param x_null  the training/testing data/input matrix (ignored, pass null)
     *  @param y_      the full/testing response/output vector (e.g., full y)
     */
    def test (x_null: MatrixD, y_ : VectorD): (VectorD, VectorD) =
        val (yy, yp) = testSetup (y_)                                  // get and align actual and predicted values
        e = yy - yp                                                    // set the residuals/errors
        resetDF (p, yy.dim - p)                                        // reset the degrees of freedom
        (yp, diagnose (yy, yp))                                        // return predictions and QoF Vector
    end test

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Test FORECASTS of an AR forecasting model y_ = f(lags (y_)) + e and return its
     *  QoF vector.  Testing may be in-sample (on the training set) or out-of-sample
     *  (on the testing set) as determined by the parameters passed in.
     *  Note: must call train before testf.
     *  @param h     the forecasting horizon, number of steps ahead to produce forecasts
     *  @param y_    the full/testing response/output vector (e.g., full y)
     *  @param redo  whether to use existing forecasts or redo them (defaults to false)
     */
    def testf (h: Int, y_ : VectorD, redo: Boolean = false): VectorD =
        if yf == null || yf.dim2 < h+1 || redo then yf = forecastAll (h, y_)    // redo all forecasts
        val yy   = y_(h to y_.dim) 
        val yf_h = yf(?, h)(h to y_.dim)                               // pull column h from the forecast matrix and align
        resetDF (p, yy.dim - p)                                        // reset the degrees of freedom
        diagnose (yy, yf_h)                                            // evaluate and return the QoF of these forecasts
    end testf

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the parameter vector for the AR(p) model.
     */
    override def parameter: VectorD = φ

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Predict a value for time point/index t using 1-step ahead forecasts.
     *      y_t = φ_0 y_t-1 + φ_1 y_t-2 + ... + φ_p-1 y_t-p
     *  When k < 0 let y_k = y_0 (i.e., assume first value repeats back in time).
     *  @see predictAll in `Forecaster`
     *  @param t   the time point/index to be predicted
     *  @param y_  the actual values to use in making predictions
     */
    def predict (t: Int, y_ : VectorD): Double =
        if t < 1 || t > y_.dim then flaw ("predict", s"time index t = $t is out of range")
        var sum = δ
        for j <- 0 until p do sum += φ(j) * y_(max (0, t-1-j))
        sum                                                            // prediction for y_t
    end predict

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Forecast values for all y_.dim time points and all horizons (1 through h-steps ahead).
     *  Record these in the yf matrix, where
     *      yf(t, k) = k-steps ahead forecast for y_t
     *  Note, column 0, yf(?, 0), is set to y (the actual time-series values).
     *  Forecast recurse down diagonals in the yf forecast matrix.
     *  The top right and bottom left triangles in yf matrix are not forecastable.
     *  @param h   the maximum forecasting horizon, number of steps ahead to produce forecasts
     *  @param y_  the actual values to use in making forecasts
     */
    def forecastAll (h: Int, y_ : VectorD): MatrixD =
        yf = new MatrixD (y_.dim+h, h+1)                               // forecasts for all time points t & horizons to h
        for t <- 0 until m do yf(t, 0) = y_(t)                         // first column is actual values, horizon 0
        for k <- 1 to h do
            for t <- y_.indices do                                     // make forecasts over all time points for horizon k
                 var sum = δ
                 for j <- 0 until p do sum += φ(j) * yf(max (0, t+k-1-j), max (0, k-1-j))
                 yf(t+k, k) = sum                                      // forecast down the diagonal
            end for
            debug ("forecastAll", s"yf(?, $k) = ${yf(?, k)}")
        end for
        yf                                                             // return matrix of forecasted values
    end forecastAll

end AR


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `AR` companion object provides factory methods for the `AR` class.
 */
object AR:

    /** Base hyper-parameter specification for `AR` class
     */
    val hp = new HyperParameter
    hp += ("p", 1, 1)

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create an `AR` object.
     *  @param y       the response vector (time series data)
     *  @param tt      the time vector, if relevant (time index may suffice)
     *  @param hparam  the hyper-parameters
     */
    def apply (y: VectorD, tt: VectorD = null, hparam: HyperParameter = AR.hp): AR = 
        new AR (y, tt, hparam)
    end apply

end AR


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRTest` main function tests the `AR` class on real data: Forecasting lake levels.
 *  Test the test, predictAll, testf and forecastAll methods over the whole times-series.
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting.aRTest
 */
@main def aRTest (): Unit =

    import Example_LakeLevels.y

    val m = y.dim
    val t = VectorD.range (1, m)
    val h = 3                                                          // the forecasting horizon
 
    var mod: AR = null
    for p <- 1 to 10 do                                                // autoregressive hyper-parameter p
        hp("p") = p                                                    // set p hyper-parameter
        banner (s"Test: AR($p)")
        mod = new AR (y)                                               // create model for time series data
        mod.train (null, y)                                            // train the model on full dataset
        val yp = mod.testPred (y, t)

        val yf = mod.forecastAll (h, y)                                // forecast h-steps ahead for all y
        println (s"yf = $yf")
        println (s"yf.dims = ${yf.dims}")
//      assert (yf(?, 0)(0 until m) == y)                              // column 0 must agree with actual values
//      assert (yf(?, 1)(1 to m+1) == yp)                              // column 1 must agree with one step-ahead predictions
        for k <- 1 to h do
            println (s"evalaute QoF for horizon $k:")
            println (FitM.fitMap (mod.testf (k, y), QoF.values.map (_.toString)))    // evaluate k-units ahead forecasts
        end for
    end for

    banner ("Select model based on ACF and PACF")
    mod.plotFunc (mod.acF, "ACF")                                      // Auto-Correlation Function (ACF)
    mod.plotFunc (mod.pacF, "PACF")                                    // Partial Auto-Correlation Function (PACF)

end aRTest

