
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  Hao Peng, John Miller, Michael Cotterell
 *  @version 2.0
 *  @date    Sat Jun 13 01:27:00 EST 2017
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   Model: Auto-Regressive, Moving-Average (ARMA2)
 *
 *  @see     http://en.wikipedia.org/wiki/Autoregressive%E2%80%93moving-average_model
 *  @see     http://www.emu.edu.tr/mbalcilar/teaching2007/econ604/lecture_notes.htm
 *  @see     http://www.stat.berkeley.edu/~bartlett/courses/153-fall2010
 *  @see     http://www.princeton.edu/~apapanic/ORFE_405,_Financial_Time_Series_%28Fall_2011%29_files/slides12-13.pdf
 */

package scalation
package modeling
package forecasting

import scala.math.max

import scalation.mathstat._
import scalation.optimization._

import ARMA2.hp

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ARMA2` class provides basic time series analysis capabilities for Auto-Regressive,
 *  Moving-Average (ARMA2) models.  In an ARMA2(p, q) model, p refers to the order of the
 *  Auto-Regressive  components and q refers to the Moving-Average compoenest of the model.
 *  ARMA2 models are often used for forecasting.
 *  Given time-series data stored in vector y, its next value y_t = y(t)
 *  may be predicted based on prior values of y and its noise:
 *      y_t = δ + Σ(φ_k y_t-k) + Σ(θ_k e_t-k) + e_t
 *  where δ is a constant, φ is the auto-regressive coefficient vector,
 *  θ is the moving-average vector, and e_t is the noise term.
 *----------------------------------------------------------------------------------
 *  @param y       the response vector (time-series data)
 *  @param tt      the time vector, if relevant (time index may suffice)
 *  @param hparam  the hyper-parameters
 */
class ARMA2 (y: VectorD, tt: VectorD = null, hparam: HyperParameter = ARMA2.hp)
      extends Forecaster (y, tt, hparam)
         with Correlogram (y)
         with Fit (dfm = hparam("p").toInt, df = y.dim - hparam("p").toInt):

    private val debug = debugf ("ARMA2", true)                           // debug function
    private val flaw  = flawf ("ARMA2")                                  // flaw function

                  m   = y.dim                                            // number of time points (@see `FitM`)
    protected var p   = hparam("p").toInt                                // p-th order Auto-Regressive and
    protected var q   = hparam("q").toInt                                // q-th order Moving-Average model
    protected var φ   = VectorD.nullv                                    // AR(p) parameters/coefficients part
    protected var θ   = VectorD.nullv                                    // MA(q) parameters/coefficients part
    protected var δ   = NO_DOUBLE                                        // drift/intercept/constant term
//  protected var yf  = MatrixD.nullm                                    // the forecast matrix - time points x horizons

    if p > MAX_LAGS then flaw ("init", s"p = $p must not be greater than MAX_LAGS = $MAX_LAGS")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the model name including its current hyper-parameter, e.g., ARMA2(2, 1).
     */
    override def modelName: String = s"ARMA2($p, $q)"

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Train/fit an `ARMA2` model to the times-series data in vector y_.
     *  Estimate the coefficient vector φ for a p-th order Auto-Regressive ARMA2(p) model.
     *  Uses Durbin-Levinson Algorithm (in `Correlogram`) to determine the coefficients.
     *  The φ vector is p-th row of psi matrix (ignoring the first (0th) column).
     *  @param x_null  the data/input matrix (ignored, pass null)
     *  @param y_      the training/full response vector (e.g., full y)
     */
    def train (x_null: MatrixD, y_ : VectorD): Unit = 
        m = y_.dim                                                       // length of relevant time-series
        resetDF (p+q, m - (p+q))                                         // reset the degrees of freedom
        makeCorrelogram (y_)                                             // correlogram computes psi matrix, gives ACF and PACF

        val mu = y_.mean                                                 // sample mean of y_
        val z  = y_ - mu                                                 // optimization works better using zero-centered data
        φ = new VectorD (p)                                              // zeros for AR part
        θ = new VectorD (q)                                              // zeros for MA part
        δ = 0.0                                                          // drift/intercept for z (should end up close to zero)
        val b = φ ++ θ :+ δ                                              // combine all parameters -> vector to optimize

        def csse (b: VectorD): Double =                                  // objective function - conditional sum of squared errors
            φ = b(0 to p); θ = b(p to p+q); δ = b(b.dim-1)               // pull parameters out of b vector
            ssef (z, predictAll (z))                                     // compute loss function
        end csse

        def nll (b: VectorD): Double =                                   // objective function - negative log-likelihood (MLE)
            0.0                                                          // FIX - implement
        end nll

        val optimizer = new BFGS (csse)                                  // apply Quasi-Newton BFGS optimizer
//      val optimizer = new ConjugateGradient (csse)                     // apply Conjugate Gradient optimizer - fails
//      val optimizer = new CoordinateDescent (csse)                     // apply Coordinate Descent optimizer
//      val optimizer = new NelderMeadSimplex (csse, 3)                  // apply Nelder-Mead Simplex optimizer
//      val optimizer = new GridSearch (csse, 3); optimizer.setAxes ()   // apply GridSearch BFGS optimizer - close
        val (fb, bb) = optimizer.solve (b)                               // optimal solution for the objective function and parameters

        φ = bb(0 to p); θ = bb(p to p+q); δ = bb(b.dim-1)                // recover parameters for z
        δ += mu * (1 - φ.sum)                                            // uncenter  
        debug ("train", s"parameters for ARMA2($p, $q) model: φ = $φ, θ = $θ, δ = $δ")
    end train

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Test PREDICTIONS of an ARMA2 forecasting model y_ = f(lags (y_)) + e and return its
     *  QoF vector.  Testing may be be in-sample (on the training set) or out-of-sample
     *  (on the testing set) as determined by the parameters passed in.
     *  Note: must call train before test.
     *  @param x_null  the training/testing data/input matrix (ignored, pass null)
     *  @param y_      the training/testing response/output vector (e.g., full y)
     */
    def test (x_null: MatrixD, y_ : VectorD): (VectorD, VectorD) =
        val (yy, yp) = testSetup (y_)                                    // get and align actual and predicted values
        resetDF (p+q, yy.dim - (p+q))                                    // reset the degrees of freedom
        (yp, diagnose (yy, yp))                                          // evaluate and return the QoF of these predictions
    end test

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Test FORECASTS of an ARMA2 forecasting model y_ = f(lags (y_)) + e and return its
     *  QoF vector.  Testing may be be in-sample (on the training set) or out-of-sample
     *  (on the testing set) as determined by the parameters passed in.
     *  Note: must call train before test.
     *  @param h     the forecasting horizon, number of steps ahead to produce forecasts
     *  @param y_    the training/testing response/output vector (e.g., full y)
     *  @param redo  whether to use existing forecasts or redo them (defaults to false)
     */
    def testF (h: Int, y_ : VectorD): (VectorD, VectorD) =
        if yf == null || yf.dim2 < h+1 then yf = forecastAll (h, y_)     // redo all forecasts
        val yy  = y_(h to y_.dim) 
        val yfh = yf(?, h)(h to y_.dim)                                  // pull column h from the forecast matrix and align
        resetDF (p+q, yy.dim - (p+q))                                    // reset the degrees of freedom
        (yfh, diagnose (yy, yfh))                                        // evaluate and return the QoF of these forecasts
    end testF

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the parameter vector for the ARMA2(p, q) model.
     */
    override def parameter: VectorD = φ ++ θ :+ δ

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Predict a value for y_t+1 using 1-step ahead forecasts.
     *      y_t+1 = φ_0 y_t + φ_1 y_t-1 + ... + φ_p-1 y_t-(p-1) +
     *              θ_0 e_t + θ_1 e_t-1 + ... + θ_q-1 e_t-(q-1) + e_t+1
     *  When k < 0 let y_k = y_0 (i.e., assume first value repeats back in time),
     *  but do not assume errors repeat.
     *  @see predictAll in `Forecaster`
     *  @param t   the time point/index to be predicted
     *  @param y_  the actual values to use in making predictions
     */
    def predict (t: Int, y_ : VectorD): Double =
        var sum = δ                                                      // intercept
        for j <- 0 until p do             sum += φ(j) * y_(max (0, t-j))
        for j <- 0 until q if t-j >= 0 do sum += θ(j) * e(t-j)
        if t < y_.dim-1 then e(t+1) = y_(t+1) - sum                      // update the error vector
        sum                                                              // prediction for y_t, yp_t
    end predict

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Forecast values for all y_.dim time points and all horizons (1 through h-steps ahead).
     *  Record these in the yf matrix, where
     *      yf(t, k) = k-steps ahead forecast for y_t
     *  Note, column 0, yf(?, 0), is set to y (the actual time-series values).
     *  Forecast recurse down diagonals in the yf forecast matrix.
     *  The top right and bottom left triangles in yf matrix are not forecastable.
     *  @param h  the maximum forecasting horizon, number of steps ahead to produce forecasts
     *  @param y_  the actual values to use in making forecasts
     */
    def forecastAll (h: Int, y_ : VectorD): MatrixD =
        yf = new MatrixD (y_.dim+h, h+1)                                 // forecasts for all time points t & horizons to h
        for t <- 0 until m do yf(t, 0) = y_(t)                           // first column is actual values, horizon 0
        for k <- 1 to h do
            for t <- y_.indices do                                       // make forecasts over all time points for horizon k
                 var sum = δ
                 for j <- 0 until p do sum += φ(j) * yf(max (0, t+k-1-j), max (0, k-1-j))
                 yf(t+k, k) = sum                                        // forecast down the diagonal
            end for
            debug ("forecastAll", s"yf(?, $k) = ${yf(?, k)}")
        end for
        yf                                                               // return matrix of forecasted values
    end forecastAll

   //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Forecast values for all y_.dim time points at horizon h (h-steps ahead).
     *  Assign to forecasting matrix and return h-step ahead forecast.
     *  For 1-step ahead (h = 1),
     *      y_t = δ + φ_0 y_t-1 + φ_1 y_t-2 + ... + φ_p-1 y_t-p
     *  When k < 0 let y_k = y_0 (i.e., assume first value repeats back in time).
     *  @param yf  the forecasting matrix (time x horizons)
     *  @param y_  the actual values to use in making forecasts
     *  @param h   the forecasting horizon, number of steps ahead to produce forecasts
     */
    override def forecastAt (yf: MatrixD, y_ : VectorD, h: Int): VectorD =
        if h < 1 then flaw ("forecastAt", s"horizon h = $h must be at least 1")
        e(0)                                                             // assume error at time 0 is 0
        val m = y_.dim
        for t <- y_.indices do                                           // make forecasts over all time points for horizon k
            val t1  = t+h-1                                              // time point prior to horizon
            var sum = δ
            for j <- 0 until p do              sum += φ(j) * yf(max (0, t1-j), max (0, h-1-j))
            for j <- 0 until q if t1-j >= 0 do sum += θ(j) * e(t1-j)
            yf(t+h, h) = sum                                             // forecast down the diagonal
            if h == 1 && t < m-1 then e(t+1) = y_(t+1) - sum             // update the next element in the error vector
        end for
        yf(?, h)                                                         // return the h-step ahead forecast vector
    end forecastAt

end ARMA2


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ARMA2` companion object provides factory methods for the `ARMA2` class.
 */
object ARMA2:

    /** Base hyper-parameter specification for `ARMA2` class
     */
    val hp = new HyperParameter
    hp += ("p", 1, 1)
    hp += ("q", 0, 0)

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create an `ARMA2` object.
     *  @param y       the response vector (time series data)
     *  @param tt      the time vector, if relevant (time index may suffice)
     *  @param hparam  the hyper-parameters
     */
    def apply (y: VectorD, tt: VectorD = null, hparam: HyperParameter = ARMA2.hp): ARMA2 = 
        new ARMA2 (y, tt, hparam)
    end apply

end ARMA2

import Example_LakeLevels.y

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRMA2Test` main function tests the `ARMA2` class on real data:  Forecasting lake levels.
 *  Test predictions (one step ahead forecasts).
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting.aRMA2Test
 */
@main def aRMA2Test (): Unit =

    banner (s"Test Predictions: ARMA(1, 0) on LakeLevels Dataset")
    var mod = new ARMA2 (y)                                            // create model for time series data ARMA(1, 0)
    mod.train (null, y)                                                // train the model on full dataset
    val (yp, qof) = mod.test (null, y)                                 // test the model on full dataset
    println (mod.report (qof))                                         // report on Quality of Fit (QoF)

    banner (s"Test Predictions: ARMA(1, 1) on LakeLevels Dataset")
    hp("q") = 1                                                        // set moving-average hyper-parameter q to 1
    mod = new ARMA2 (y)                                                // create model for time series data ARMA(1, 1)
    mod.train (null, y)                                                // train the model on full dataset
    val (yp2, qof2) = mod.test (null, y)                               // test the model on full dataset
    println (mod.report (qof2))                                        // report on Quality of Fit (QoF)

    banner ("Select model based on ACF and PACF")
    mod.plotFunc (mod.acF, "ACF")                                      // Auto-Correlation Function (ACF)
    mod.plotFunc (mod.pacF, "PACF")                                    // Partial Auto-Correlation Function (PACF)

end aRMA2Test


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRMA2Test2` main function tests the `ARMA2` class on real data: Forecasting lake levels.
 *  Test the test, predictAll, testf and forecastAll methods over the whole times-series.
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting.aRMA2Test2
 */
@main def aRMA2Test2 (): Unit =

    val m = y.dim
    val t = VectorD.range (1, m)
    val h = 3                                                          // the forecasting horizon
    val q = 1; hp("q") = q                                             // moving-average hyper-parameter q
 
    var mod: ARMA2 = null
    for p <- 1 to 1 do                                                 // autoregressive hyper-parameter p
        hp("p") = p                                                    // set p hyper-parameter
        banner (s"Test: ARMA2($p, $q}")
        mod = new ARMA2 (y)                                            // create model for time series data
        mod.train (null, y)                                            // train the model on full dataset
        val (yp, qof) = mod.test (null, y)
/*
        val yf = mod.forecastAll (h, y)                                 // forecast h-steps ahead for all y
        println (s"yf = $yf")
        println (s"yf.dims = ${yf.dims}")
        assert (yf(?, 0)(0 until m) == y)                              // column 0 must agree with actual values
        assert (yf(?, 1)(1 to m+1) == yp)                              // column 1 must agree with one step-ahead predictions
        for k <- 1 to h do
            println (s"evalaute QoF for horizon $k:")
            println (Fit.fitMap (mod.testf (k, y)))                    // evaluate k-units ahead forecasts
        end for
*/
    end for

    banner ("Select model based on ACF and PACF")
    mod.plotFunc (mod.acF, "ACF")                                      // Auto-Correlation Function (ACF)
    mod.plotFunc (mod.pacF, "PACF")                                    // Partial Auto-Correlation Function (PACF)

end aRMA2Test2

