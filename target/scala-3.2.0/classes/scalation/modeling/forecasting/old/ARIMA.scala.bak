
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Sat Jul 31 13:20:29 EDT 2021
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   Model: Auto-Regressive, Integrated, Moving-Average (ARIMA)
 *
 *  @see     http://en.wikipedia.org/wiki/Autoregressive%E2%80%93moving-average_model
 *  @see     http://www.emu.edu.tr/mbalcilar/teaching2007/econ604/lecture_notes.htm
 *  @see     http://www.stat.berkeley.edu/~bartlett/courses/153-fall2010
 *  @see     http://www.princeton.edu/~apapanic/ORFE_405,_Financial_Time_Series_%28Fall_2011%29_files/slides12-13.pdf
 */

package scalation
package modeling
package forecasting

import scala.math.max

import scalation.mathstat._
import scalation.optimization._

import ARIMA.hp

val flaw = flawf ("forecasting")                                // flaw function

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** Take the 1-st difference of vector/time-series y.
 *  Note, it stores the first value in the original times-series in the first
 *  position of the differenced vector.
 *  @param y  the vector/time-series to be differenced 
 */
def diff (y: VectorD): (Double, VectorD) =
    val yd = new VectorD (y.dim-1)
    for i <- yd.indices do yd(i) = y(i+1) - y(i)
    (y(0), yd)
end diff

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** Take the 1-st inverse-difference of vector/time-series x.
 *  Restores the original time-series if x(0) holds first value in original time-series. 
 *  @param x  the vector/time-series to be inverse-differenced
 */
def diffinv (y0: Double, yd: VectorD): VectorD =
    val y = new VectorD (yd.dim+1)
    y(0) = y0
    for i <- 1 until y.dim do y(i) = yd(i-1) + y(i-1)
    y
end diffinv

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** Take the 'd'-th difference on vector/time-series 'y'.  For efficiency,
 *  this method is destructive of 'y' (make a copy to preserve).
 *  @param y  the vector/time-series to be differenced 
 *  @param d  the order or number of differences to be taken
def diff (y: VectorD, d: Int): VectorD =
    if d < 1 then flaw ("diff", s"requires the number of differences $d > 0")
    for k <- 1 to d do diff (y)
    y
end diff
 */

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** Take the 'd'-th inverse-difference on vector/time-series 'y'.  For efficiency,
 *  this method is destructive of 'y' (make a copy to preserve).
 *  Restores the original time-series if 'y(0)' holds first value in original time-series. 
 *  @param y  the vector/time-series to be inverse-differenced 
 *  @param d  the order or number of inverse-differences to be taken
def diffinv (y: VectorD, d: Int): VectorD =
    if d < 1 then flaw ("diffinv", s"requires the number of inverse-differences $d > 0")
    for k <- 1 to d do diffinv (y)
    y
end diffinv
 */


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ARIMA` class provides basic time series analysis capabilities for Auto-Regressive,
 *  Integrated, Moving-Average (ARIMA) models.  In an ARIMA(p, q) model, p refers to the
 *  order of the Auto-Regressive  components, d refers to the number of differences,
 *  and q refers to the Moving-Average compoenest of the model.
 *  ARIMA models are often used for forecasting.
 *  Given time-series data stored in vector y, its next value y_t = y(t)
 *  may be predicted based on prior values of y and its noise:
 *      diff_d (y_t) = δ + Σ(φ_k y_t-k) + Σ(θ_k e_t-k) + e_t
 *  where δ is a constant, φ is the auto-regressive coefficient vector,
 *  θ is the moving-average vector, and e_t is the noise term.
 *----------------------------------------------------------------------------------
 *  @param y       the response vector (time-series data)
 *  @param tt      the time vector, if relevant (time index may suffice)
 *  @param hparam  the hyper-parameters
 */
class ARIMA (y: VectorD, tt: VectorD = null, hparam: HyperParameter = ARIMA.hp)
      extends ARMA (diff (y)._2, tt, hparam):
//      extends ARMA (diff (y, hparam("d").toInt), tt, hparam):

    private val debug = debugf ("ARIMA", true)                         // debug function
    private val flaw  = flawf ("ARIMA")                                // flaw function
    private val d     = hparam("d").toInt                              // the number of differences
    private val (y0, yd) = diff (y) 

    assert (getY == yd)

    if p > MAX_LAGS then flaw ("ARIMA", s"p = $p must not be greater than MAX_LAGS = $MAX_LAGS")

    debug ("constructor", s"d = $d, y0 = $y0, diff (yd) = $yd")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the model name including its current hyper-parameter, e.g., ARIMA(3, 1, 2).
     */
    override def modelName: String = s"ARIMA($p, $d, $q)"

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Predict all values for a time-series using 1-step ahead forecasts.
     *      y_t = φ_0 y_t-1 + φ_1 y_t-2 + ... + φ_p-1 y_t-p
     *  @see predictAll in `Forecaster`
     *  @param y_  the actual values to use in making predictions
     */
    override def predictAll (y_ : VectorD): VectorD =
        super.predictAll (y_)
    end predictAll

    def predictAll2 (y_ : VectorD): VectorD =
        val yd = super.predictAll (y_)
        val yy = new VectorD (yd.dim + 1)
        yy(0) = y0
        for i <- 1 until yy.dim do yy(i) = yy(i-1) + yd(i-1)
        println (s"predictAll2: yy = $yy")
        yy
    end predictAll2

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Test PREDICTIONS of an ARMA forecasting model y_ = f(lags (y_)) + e and return its
     *  QoF vector.  Testing may be be in-sample (on the training set) or out-of-sample
     *  (on the testing set) as determined by the parameters passed in.
     *  Note: must call train before test.
     *  @param x_null  the training/testing data/input matrix (ignored, pass null)
     *  @param y_      the training/testing response/output vector (e.g., full y)
     */
    def test2 (x_null: MatrixD, y_ : VectorD): VectorD =
        val yp  = predictAll2 (yd)                                     // make predictions
        val yy  = y_(1 to y_.dim)
        val yyp = yp(0 to y_.dim-1)                                    // align actual and predicted vectors

        resetDF (p, yy.dim - p)                                        // reset the degrees of freedom
        diagnose (yy, yp)                                              // evaluate and return the QoF of these predictions
    end test2

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Forecast values for all y_.dim time points and all horizons (1 through h-steps ahead).
     *  Record these in the yf matrix, where
     *      yf(t, k) = k-steps ahead forecast for y_t
     *  Note, column 0, yf(?, 0), is set to y (the actual time-series values).
     *  Forecast recurse down diagonals in the yf forecast matrix.
     *  The top right and bottom left triangles in yf matrix are not forecastable.
     *  @param h  the maximum forecasting horizon, number of steps ahead to produce forecasts
     *  @param y_  the actual values to use in making forecasts
     */
    override def forecastAll (h: Int, y_ : VectorD): MatrixD =
        val yy = super.forecastAll (h, y_)
//        MatrixD (for j <- yf.indices2 yield diffinv (yy(?, j))).transpose
        yy
    end forecastAll

end ARIMA


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ARIMA` companion object provides factory methods for the `ARIMA` class.
 */
object ARIMA:

    /** Base hyper-parameter specification for `ARIMA` class
     */
    val hp = new HyperParameter
    hp += ("p", 1, 1)
    hp += ("d", 1, 1)
    hp += ("q", 1, 1)

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create an `ARIMA` object.
     *  @param y       the response vector (time series data)
     *  @param tt      the time vector, if relevant (time index may suffice)
     *  @param hparam  the hyper-parameters
     */
    def apply (y: VectorD, tt: VectorD = null, hparam: HyperParameter = ARIMA.hp): ARIMA = 
        new ARIMA (y, tt, hparam)
    end apply

end ARIMA


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ARIMATest` object is used to test the `ARIMA` class on real data: Forecasting lake levels.
 *  Test the test, predictAll, testf and forecastAll methods over the whole times-series.
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting.ARIMATest
 */
object ARIMATest extends App:

    import Example_LakeLevels.y
    val m = y.dim
    val t = VectorD.range (1, m)
    val h = 3                                                          // the forecasting horizon
    val d = 1; hp("d") = d                                             // differencing hyper-parameter d
    val q = 1; hp("q") = q                                             // moving-average hyper-parameter q
 
    var ar: ARIMA = null
    for p <- 1 to 1 do                                                 // autoregressive hyper-parameter p
        hp("p") = p                                                    // set p hyper-parameter
        banner (s"Test: ARIMA($p, $d, $q}")
        ar = new ARIMA (y)                                             // create model for time series data
        val yd = ar.getY
        ar.train (null, yd)                                            // train the model on full dataset

        banner (s"Test: ARIMA($p, $d, $q} Differenced")
        println (ar.report (ar.test (null, yd)))                       // test the model and report results
        val ydp = ar.predictAll (yd)                                   // predict 1-step ahead for all y
        val yyd = yd(1 to yd.dim)
        new Plot (t, yyd, ydp, s"ARIMA($p, $d, $q): yd-actual vs. yd-predicted", lines = true)

        banner (s"Test: ARIMA($p, $d, $q} Undifferenced")
        println (ar.report (ar.test2 (null, yd)))                      // test the model and report results
        val yp = ar.predictAll2 (yd)                                   // predict 1-step ahead for all y
        val yy = y(1 to y.dim)
        new Plot (t, yy, yp, s"ARIMA($p, $d, $q): y-actual vs. y-predicted", lines = true)
/*
        val yf = ar.forecastAll (h, y)                                 // forecast h-steps ahead for all y
        println (s"yf = $yf")
        println (s"yf.dims = ${yf.dims}")
        assert (yf(?, 0)(0 until m) == y)                              // column 0 must agree with actual values
        assert (yf(?, 1)(1 to m+1) == yp)                              // column 1 must agree with one step-ahead predictions
        for k <- 1 to h do
            println (s"evalaute QoF for horizon $k:")
            println (Fit.fitMap (ar.testf (k, y)))                     // evaluate k-units ahead forecasts
        end for
*/
    end for

    banner ("Select model based on ACF and PACF")
    ar.plotFunc (ar.acF, "ACF")                                        // Auto-Correlation Function (ACF)
    ar.plotFunc (ar.pacF, "PACF")                                      // Partial Auto-Correlation Function (PACF)

end ARIMATest


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ARIMATest2` object is used to test the `ARIMA` class on real data: Forecasting lake levels.
 *  Test the test, predictAll, testf and forecastAll methods over the whole times-series.
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting.ARIMATest2
 */
object ARIMATest2 extends App:

    import Example_LakeLevels.y

    val (y0, yd) = diff (y)
    val z = diffinv (y0, yd)

    println (s"original    y = $y")
    println (s"differenced x = $yd")
    println (s"restored    z = $z")
    assert (z == y)

end ARIMATest2

