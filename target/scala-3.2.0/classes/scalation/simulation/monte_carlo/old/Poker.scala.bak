
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Fri Jan 14 21:14:29 EST 2022
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   Poker Hands
 */

package scalation
package simulation
package monte_carlo

import scala.runtime.ScalaRunTime.stringOf

import Cards._

object Poker:

    def checkPair (deck: Cards, hand: IndexedSeq [Int]): Boolean =
        for i <- hand.indices do
            println (s"card $i = ${value (hand(i))}")
            for j <- i+1 until hand.length do
                if value (hand(i))._1 == value (hand(j))._1 then
                   println (s"pair: ${value (hand(i))}, ${value (hand(j))}")
                   return true
                end if
            end for
        end for
        false
    end checkPair

    def checkTrip (deck: Cards, hand: IndexedSeq [Int]): Boolean =
        for i <- hand.indices do
            println (s"card $i = ${value (hand(i))}")
            for j <- i+1 until hand.length do
                if value (hand(i))._1 == value (hand(j))._1 then
                   for k <- j+1 until hand.length do
                       if value (hand(j))._1 == value (hand(k))._1 then
                          println (s"Tripple: ${value (hand(j))}, ${value (hand(k))}")
                          return true
                       end if
                   end for
                end if
            end for
        end for
        false
    end checkTrip

end Poker

// runMain scalation.simulation.monte_carlo.runPoker

@main def runPoker (): Unit =

    val deck = new Cards ()
    println ("\nOrdered deck of cards:")
    println (deck)
    deck.shuffle ()
    println ("\nShuffled deck of cards:")
    println (deck)

    for h <- 1 to 200 do
        banner (s"Hand $h")
        val hand = for i <- 1 to 5 yield deck.draw ()
        println ("\n5 card hand = " + hand)

        println ("pair = " + Poker.checkPair (deck, hand))
        val trip = Poker.checkTrip (deck, hand)
        println ("trip = " + trip)
        if trip then return
        deck.shuffle ()
    end for

end runPoker

