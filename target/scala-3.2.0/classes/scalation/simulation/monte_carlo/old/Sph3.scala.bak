
package scalation.simulation.montecarlo

// runMain scalation.simulation.montecarlo.calculateVolume

import scala.math.pow
import scala.math.sqrt

val pi = 3.14
val n = 10000
val height = 1 / n.asInstanceOf[Double]
var volume_disc = 0.0
var volume_total = 0.0
var r = 0.0

/** unit_sphere: 1 = x^2 + y^2 + z^2
  * radius_circle = sqrt(x^2+y^2)
  * Solve for sqrt(x^2+y^2) using equation for unit sphere: 1 = x^2 + y^2 + z^2
  * sqrt(x^2+y^2) = sqrt(1 - z^2) = radius_circle as a function of z, the height of sphere
  * Slice sphere into thin discs with height = 1/n, where n > 0
  * Focus on top half of sphere and let n = num of discs = i = num of repetitions
  * volume_sphere = [sum over i of (volume_disc)] * 2
  * volume_disc = pi * radius_circle^2 * height
  * radius_circle = sqrt(1 - z^2) = sqrt(1 - (height * i)^2)
  */
@main def calculateVolume(): Unit =
  for i <- 1 to n do // volume of one half of sphere
    r = sqrt(1 - pow(height*i,2))
    volume_disc = pi * pow(r,2) * height
    volume_total = volume_total + volume_disc
  end for
  volume_total = volume_total * 2 // add the other half of sphere
  println("Volume = " + volume_total)
end calculateVolume

