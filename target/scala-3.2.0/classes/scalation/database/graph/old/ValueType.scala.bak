
//========================================================================================
/** @author  John Miller
 *  @version 1.8
 *  @date    Sat Aug 29 14:14:32 EDT 2020
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   ValueType - union datatype for atomic database values
 */

package scalation

import scala.collection.mutable.Map

//import scala.collection.immutable.{Vector => VEC}                       // for immutable
import scala.collection.mutable.{ArrayBuffer => VEC}                      // for mutable

//========================================================================================
/** The `ValueType` type is a union type for atomic database values.
 */
type ValueType = Int | Long | Double | String

extension (x: ValueType)
    def < (y: Int): Boolean    = x.asInstanceOf [Int] < y
    def < (y: Long): Boolean   = x.asInstanceOf [Long] < y
    def < (y: Double): Boolean = x.asInstanceOf [Double] < y
    def < (y: String): Boolean = x.asInstanceOf [String] < y

//========================================================================================
/** The `Property` type is a map to take property names to property values.
 */
type Property = Map [String, ValueType]

extension (p: Property)
    def +++ (q: Property): Property = 
        val pq = p.clone
        for qe <- q do pq += (if p contains qe._1 then (qe._1 + "2", qe._2) else qe)
        pq

//========================================================================================
/** The `ValueTypeTest` object is used to test the `ValueType` type.
 *  > runMain scalation.ValueTypeTest
 */
object ValueTypeTest extends App:

    val store = VEC [ValueType] (0, 1L, 2.0, "three")
    println (s"store = $store")
    println (s"store(0) == 1: ${store(0) == 1}")
    println (s"store(0) < 1: ${store(0) < 1}")

