
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Thu Oct 22 15:05:06 EDT 2009
 *  @see     LICENSE (MIT style license file). 
 */

package scalation
package scala2d

import scala.math.{cos, Pi, sin}

import scalation.mathstat.VectorD

import Colors._
import Constants._

// FIX - add setFrame method

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Triangle` class extends the `Polygon` class (from the `java.awt.geom`).
 */
class Triangle ()
      extends Polygon ():

    private val flaw = flawf ("Triangle")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Set the points/vetices for the triangle. 
     *  @param x  the x-coordinates
     *  @param y  the y-coordinates
     */
    def addPoints (x: VectorD, y: VectorD): Unit =
        if x.dim != 3 || y.dim != 3 then flaw ("addPoints", "need exactly 3 vertices to make a triangle")
        for i <- x.indices do addPoint (x(i).toInt, y(i).toInt)
    end addPoints

end Triangle


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Quad` class extends the `Polygon` class (from the `java.awt.geom`).
 */
class Quad ()
      extends Polygon ():

    private val flaw = flawf ("Quad")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Set the points/vetices for the quad. 
     *  @param x  the x-coordinates
     *  @param y  the y-coordinates
     */
    def addPoints (x: VectorD, y: VectorD): Unit =
        if x.dim != 4 || y.dim != 4 then flaw ("addPoints", "need exactly 4 vertices to make a quad")
        for i <- x.indices do addPoint (x(i).toInt, y(i).toInt)
    end addPoints

end Quad


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Pentagon` class extends the `Polygon` class (from the `java.awt.geom`).
 */
class Pentagon ()
      extends Polygon ():

    private val flaw = flawf ("Pentagon")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Set the points/vetices for the quad. 
     *  @param x  the x-coordinates
     *  @param y  the y-coordinates
     */
    def addPoints (x: VectorD, y: VectorD): Unit =
        if x.dim != 5 || y.dim != 5 then flaw ("addPoints", "need exactly 5 vertices to make a pentagon")
        for i <- x.indices do addPoint (x(i).toInt, y(i).toInt)
    end addPoints

end Pentagon


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Hexagon` class extends the `Polygon` class (from the `java.awt.geom`).
 */
class Hexagon ()
      extends Polygon ():

    private val flaw = flawf ("Hexagon")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Set the points/vetices for the quad.
     *  @param x  the x-coordinates
     *  @param y  the y-coordinates
     */
    def addPoints (x: VectorD, y: VectorD): Unit =
        if x.dim != 6 || y.dim != 6 then flaw ("addPoints", "need exactly 6 vertices to make a hexagon")
        for i <- x.indices do addPoint (x(i).toInt, y(i).toInt)
    end addPoints

end Hexagon


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Octagon` class extends the `Polygon` class (from the `java.awt.geom`).
 */
class Octagon ()
      extends Polygon ():

    private val flaw = flawf ("Octagon")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Set the points/vetices for the quad.
     *  @param x  the x-coordinates
     *  @param y  the y-coordinates
     */
    def addPoints (x: VectorD, y: VectorD): Unit =
        if x.dim != 8 || y.dim != 8 then flaw ("addPoints", "need exactly 8 vertices to make a hexagon")
        for i <- x.indices do addPoint (x(i).toInt, y(i).toInt)
    end addPoints

end Octagon


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `OctagonHV` class extends the `Polygon` class (from the `java.awt.geom`).
 */
class OctagonHV ()
      extends Polygon ():

    private val flaw = flawf ("OctagonHV")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Set the points/vetices for the horizontally flattened octagon.
     *  @param x  the x-coordinates
     *  @param y  the y-coordinates
     */
    def addPoints (x: VectorD, y: VectorD): Unit =
        if x.dim != 8 || y.dim != 8 then flaw ("addPoints", "need exactly 8 vertices to make a hexagon")
        for i <- x.indices do addPoint (x(i).toInt, y(i).toInt)
    end addPoints

end OctagonHV


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** Useful constants.
 */
object Constants:

    val cos45 = cos (Pi / 4.0)     // same value for sin45
    val cos60 = cos (Pi / 3.0)
    val sin60 = sin (Pi / 3.0)
    val cos72 = cos (2.0 * Pi / 5.0)
    val sin72 = sin (2.0 * Pi / 5.0)

end Constants


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `PolygonTest` object tests the `Polygon`, `Triangle`, `Quad`, `Hexagon`
 *  and Octagon classes.
 *  > runMain scalation.scala2d.PolygonTest
 */
object PolygonTest extends App:

    banner ("Running PolygonTest")

    private val dot        = Ellipse ()
    private val triangle   = new Triangle ()
    triangle.addPionts (VectorD (100, 100, 150), VectorD (100, 150, 150))
    private val triangleXY = triangle.getTopLeft
/*
    private val square     = new Quad     (new R2 (400, 100), 150)
    private val squareXY   = square.getTopLeft
    private val parogram   = new Quad     (new R2 (100, 350), 150, 100, 25)
    private val parogramXY = parogram.getTopLeft
    private val pentagon   = new Pentagon (new R2 (400, 350), 90)
    private val pentagonXY = pentagon.getTopLeft
    private val hexagon    = new Hexagon  (new R2 (100, 600), 80)
    private val hexagonXY  = hexagon.getTopLeft
    private val octagon    = new Octagon  (new R2 (400, 600), 70)
    private val octagonXY  = octagon.getTopLeft
    private val stopSign   = new OctagonHF (); stopSign.setFrame (100, 850, 70, 0.5)
    private val stopSignXY = stopSign.getTopLeft
    private val stopSign2  = new OctagonVF (); stopSign2.setFrame (400, 850, 70, 0.5)
    private val stopSign2XY = stopSign2.getTopLeft
*/

    class Canvas extends Panel:

        setBackground (white)

        //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        /** Paint the components into the canvas (drawing panel).
         *  @param gr  low-resolution graphics environment
         */
        override def paintComponent (gr: Graphics): Unit =
            super.paintComponent (gr)
            val g2d = gr.asInstanceOf [Graphics2D]            // use hi-resolution
            g2d.setPaint (orange);  g2d.fill (triangle)
            g2d.setPaint (black);   dot.setFrame (triangleXY.x, triangleXY.y, 5, 5); g2d.fill (dot)
/*
            g2d.setPaint (green);   g2d.fill (square)
            g2d.setPaint (black);   dot.setFrame (squareXY.x, squareXY.y, 5, 5); g2d.fill (dot)
            g2d.setPaint (blue);    g2d.fill (parogram)
            g2d.setPaint (black);   dot.setFrame (parogramXY.x, parogramXY.y, 5, 5); g2d.fill (dot)
            g2d.setPaint (yellow);  g2d.fill (pentagon)
            g2d.setPaint (black);   dot.setFrame (pentagonXY.x, pentagonXY.y, 5, 5); g2d.fill (dot)
            g2d.setPaint (cyan);    g2d.fill (hexagon)
            g2d.setPaint (black);   dot.setFrame (hexagonXY.x, hexagonXY.y, 5, 5); g2d.fill (dot)
            g2d.setPaint (magenta); g2d.fill (octagon)
            g2d.setPaint (black);   dot.setFrame (octagonXY.x, octagonXY.y, 5, 5); g2d.fill (dot)
            g2d.setPaint (red);     g2d.fill (stopSign)
            g2d.setPaint (black);   dot.setFrame (stopSignXY.x, stopSignXY.y, 5, 5); g2d.fill (dot)
            g2d.setPaint (red);     g2d.fill (stopSign2)
            g2d.setPaint (black);   dot.setFrame (stopSign2XY.x, stopSign2XY.y, 5, 5); g2d.fill (dot)
*/
        end paintComponent

    end Canvas

    // Put the drawing canvas in the visualization frame

    new VizFrame ("PolygonTest", new Canvas (), 700, 1100)

end PolygonTest

