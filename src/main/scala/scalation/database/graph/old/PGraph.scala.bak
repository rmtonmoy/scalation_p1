
//========================================================================================
/** @author  John Miller
 *  @version 1.8
 *  @date    Sat Aug 29 14:14:32 EDT 2020
 *  @see     LICENSE (MIT style license file).
 */

package scalation

import scala.collection.mutable.Map

//import scala.collection.immutable.{Vector => VEC}
import scala.collection.mutable.{ArrayBuffer => VEC}

//========================================================================================
/** The `Vertex` class maintains properties for a vertex, e.g., a person.
 *  A vertex is analogous to a tuple in an RDBMS.
 *  @param prop  maps vertex's property names into property values
 */
case class Vertex (prop: Property) extends Serializable:

    override def toString: String =
        s"Vertex (${prop.mkString (", ")})"

//========================================================================================
/** The `VertexType` class collects vertices of the same type, e.g., a person vertex type.
 *  A vertex type is analogous to a relation with know foreign keys in an RDBMS.
 *  @param schema  the property names for this vertex type
 *  @param vs      the set of vertices having this vertex type (extension)
 */
case class VertexType (schema: VEC [String], vs: VEC [Vertex]) extends Serializable:

    //====================================================================================
    /** Check that the properties names are in the schema for this vertex type, returning
     *  whether they match the schema.
     */
    def check: Boolean =
        for v <- vs; pname <- v.prop.keys if ! (schema contains pname) do
            println (s"check: error pname = $pname not found in schema")
            return false
        true

    //====================================================================================
    /** Return the vertices where property pname has value pval.
     *  @param pname  the property name
     *  @param pval   the property value
     */
    def == (pname: String, pval: ValueType): VEC [Vertex] =
        for v <- vs if v.prop(pname) == pval yield v

    //====================================================================================
    /** Return the vertices where property pname is less than value pval.
     *  @param pname  the property name
     *  @param pval   the property value
     */
    def < (pname: String, pval: Double): VEC [Vertex] =            // FIX - want Value not Double
        for v <- vs if v.prop(pname) < pval yield v

    //====================================================================================
    /** Project each vertex in this vertex type down to the given subschema of properties.
     *  @param subschema  the subset of properies to project onto
     */
    def project (subschema: VEC [String]): VertexType =
        VertexType (subschema,
                    for v <- vs yield
                        Vertex (v.prop.filter ((k: String, v: ValueType) => subschema contains k)))

    //====================================================================================
    /** Select the vertices in this vertex type that satisfy the predicate.
     *  @param pred  the predicate to satisfy
     */
    def select (pred: Property => Boolean): VertexType =
        VertexType (schema,
                    for v <- vs if pred (v.prop) yield v)

    //====================================================================================
    /** Union this vertex type with a second vertex type.
     *  @param vt2  the second vertex type
     */
    def union (vt2: VertexType): VertexType =
        VertexType (schema, vs ++ vt2.vs)

    //====================================================================================
    /** Minus second vertex type from this vertex type.
     *  @param vt2  the second vertex type
     */
    def minus (vt2: VertexType): VertexType =
        VertexType (schema, vs diff vt2.vs)

    //----------------------------------------------------
    // Add more graph algebra operators for vertex types |
    //----------------------------------------------------

//========================================================================================
/** The `Edge` class maintains the edge's connections between vertices as well as its own properites.
 *  An edge is roughly analogous to implicit relationship manifest via foreign key-primary key pairs.
 *  The parameters may be thought of like a triple, e.g., (h, r, t) or (s, p, o).
 *  @param from  the source vertex
 *  @param prop  maps edges's property names into property values
 *  @param to    the target vertex
 */
case class Edge (from: Vertex, prop: Property, to: Vertex) extends Serializable

//========================================================================================
/** The `EdgeType` class collects edges of the same type, e.g., knows relationship type.
 *  An edge type is analogous to a relation with foreign keys in an RDBMS.
 *  @param from    the source vertex
 *  @param schema  the property names for this edge type
 *  @param to      the target vertex
 *  @param es      the set of edges having this edge type (extension)
 */
case class EdgeType (from: VertexType, schema: VEC [String], to: VertexType, es: VEC [Edge]) extends Serializable:

    //====================================================================================
    /** Check that the properties names are in the schema for this edge type, returning
     *  whether they match the schema.
     */
    def check: Boolean = true                                           // FIX - implement

    //====================================================================================
    /** Join this edge type with its outgoing vertex type.
     */
    def joinOut: VertexType =
        VertexType (schema ++ to.schema, null)

    //====================================================================================
    /** Join this edge type with its incoming vertex type.
     */
    def joinIn: VertexType =
        VertexType (from.schema ++ schema, null)

    //====================================================================================
    /** Join this edge type with both its incoming and outgoing vertex types.
     */
    def join: VertexType =
        VertexType (from.schema ++ schema ++ to.schema, null)

    //--------------------------------------------------
    // Add more graph algebra operators for edge types |
    //--------------------------------------------------

//========================================================================================
/** The `PGraph` class is used to store property graphs.
 *  @param name  the name of the property graph
 *  @param vs    the set of vertex types
 *  @param e     the set of edges connecting the vertices in the vertex types
 */
case class PGraph (name: String, vs: VEC [VertexType], e: VEC [EdgeType]) extends Serializable:

    val vmap = Map [String, VertexType] ()                                // map name to vertex type
    val emap = Map [String, EdgeType] ()                                  // map name to edge type

    // Add graph algebra operators that produce subgraph 

    //====================================================================================
    /** Convert this property graph to a string.
     */
    override def toString: String =
        s"PGraph (name = $name,\n vs = $vs},\n e = $e\n)"

//========================================================================================
/** The `PGraphTest` object is used to test the `PGraph`.
 *  > runMain scalation.PGraphTest
 */
object PGraphTest extends App:
    val v0  = Vertex (Map ("name" -> "Bob", "salary" -> 85000.0))
    val v1  = Vertex (Map ("name" -> "Sue", "salary" -> 95000.0))
    val vt0 = VertexType (VEC ("name", "salary"), VEC (v0, v1))
    println (s"check schema = ${vt0.check}")

    val e0  = Edge (v0, Map ("type" -> "knows"), v1)
    val e1  = Edge (v1, Map ("type" -> "knows"), v0)
    val et0 = EdgeType (vt0, VEC ("type"), vt0, VEC (e0, e1))
    println (s"check schema = ${et0.check}")

    val e2  = Edge (v1, Map ("type" -> "employs"), v0)
    val et1 = EdgeType (vt0, VEC ("type"), vt0, VEC (e2))
    println (s"check schema = ${et1.check}")

    val g  = PGraph ("links", VEC (vt0), VEC (et0, et1))
    g.vmap += "person"  -> vt0
    g.emap += "knows"   -> et0
    g.emap += "employs" -> et1
    println (s"g = $g")

    println ("query1")
    val query1 = g.vs(0) == ("name", "Sue")
    println (query1)

    println ("query2")
    val query2 = g.vmap("person") == ("name", "Sue")
    println (query2)

    println ("query3")
    val query3 = g.vmap("person") < ("salary", 90000.0)
    println (query3)

    println ("query4")
    val query4 = g.vmap("person").project (VEC ("name"))
    println (query4)

    println ("query5")
    val query5 = g.vmap("person").select ((p: Property) => p("name") == "Sue")
    println (query5)

    println ("query6")
    val query6 = g.vmap("person").union (g.vmap("person"))
    println (query6)

    println ("query7")
    val query7 = g.vmap("person").minus (g.vmap("person"))
    println (query7)

    println ("query8")
    val query8 = g.emap("knows").joinOut
    println (query8)

