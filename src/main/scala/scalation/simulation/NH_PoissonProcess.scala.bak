
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Wed Aug 25 15:38:28 EDT 2021
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   Non-Homogeneous Process Process (NHPP)
 */

package scalation
package simulation

import scala.collection.mutable.ArrayBuffer

import scalation.mathstat._
import scalation.random.{Exponential, VariateVec}

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `NH_PoissonProcess` class generates data following a Non-Homogeneous Poisson
 *  Process.
 *  @param t        the terminal time
 *  @param lambdaf  the arrival rate function, lambda(t)
 *  @param stream   the random number stream to use
 */
case class NH_PoissonProcess (t: Double, lambdaf: FunctionS2S, stream: Int = 0)
     extends VariateVec (stream):

    private val t_ia = Exponential (1.0, stream)            // interarrival time distribution (mu = 1)
    private var t_a  = VectorD.nullv                        // arrival time vector

    def mean: VectorD = VectorD.fill (1)(lambdaf (t) * t)   // mean of N(t) - FIX

    def pf (z: VectorD): Double = ???

    def igen: VectorI = gen.toInt

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Generate the all arrival times in the time interval [0, t], returning them
     *  as a vector.
     */
    def gen: VectorD =
        val atime = ArrayBuffer [Double] ()
        var now   = 0.0
        while now <= t do
            val lamb = lambdaf (now)
            now     += t_ia.gen / lamb
            atime   += now 
        end while
        t_a = VectorD (atime)
        t_a
    end gen

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the number of arrivals by time tt.
     *  @param tt  the inquiry time (how many arrivals by time tt)
     */
    def num (tt: Double): Int = 
        if t_a == null then gen
        for i <- t_a.indices if t_a(i) > tt do return i
        t_a.dim
    end num

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the arrivals/events occurring during each time interval of length t_span.
     *  @param t_span  the time span for an interval (e.g., 5 minute time span)
     */
    def flow (t_span: Double): VectorI =
        if t_a == null then gen
        val intervals = (t / t_span).toInt
        val flow = new VectorI (intervals+1)
        for i <- 1 to intervals do
            val start = num (i * t_span) 
            val end   = if (i < flow.dim) num ((i+1) * t_span) else num (t)
            flow(i)   = end - start
        end for
        flow
    end flow

end NH_PoissonProcess


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `NH_PoissonProcessTest` object is used to test the `NH_PoissonProcess` class.
 *  Example of car arrivals and determination of traffic flow (car per 5-minutes
 *  passing by a sensor).
 *  > runMain scalation.simulation.NH_PoissonProcessTest
 */
object NH_PoissonProcessTest extends App:

    val t_end = 50.0                                        // simulate for 50 minutes
    val tl    = VectorD.range (0, 101) / 2.0 
    def lambdaf (t: Double): Double = 1.5 - 0.001 * (t - 25.0)~^2
    new Plot (tl, func2vector (lambdaf, (0, t_end)), null, "Arrival Rate Function: lambdaf", lines = true)

    val pp = NH_PoissonProcess (t_end, lambdaf)
    println (s"pp.gen     = ${pp.gen}")
    println (s"pp.num (5) = ${pp.num (5)}")

    val t  = VectorD.range (0, 501) / 10.0 
    val nt = VectorI (for tt <- t yield pp.num (tt))
    new Plot (t, nt.toDouble, null, "NH_PoissonProcess total cars", lines = true)

    val flw  = pp.flow (5.0)
    val tflw = VectorD.range (0, 11) * 5.0
    new Plot (tflw, flw.toDouble, null, "NH_PoissonProcess cars per 5 min.", lines = true)

end NH_PoissonProcessTest

