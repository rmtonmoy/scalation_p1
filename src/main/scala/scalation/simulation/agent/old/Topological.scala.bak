
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Mon Sep 27 15:03:10 EDT 2021
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   Topological Objects Positioned in a Graph
 */

package scalation
package simulation.agent_based

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Topological` trait provides topological coordinates that are topologically
 *  partially ordered.
 *  @param s  the segment of the directed edge it is on 
 *  @param d  its distance along the segment 
 */
trait Topological (private var s: Segment, private var d: Double)
      extends PartiallyOrdered [Topological]:

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Compare two spatial objects based on their space coordinates.
     *  @param other  the other item to compare with this item
     */
    def tryCompareTo [B >: Topological: AsPartiallyOrdered] (other: B): Option [Int] =
        val oth = other.asInstanceOf [Topological]
        if s == oth.s then Option (d compare oth.d)
        else oth.s tryCompareTo oth.s

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Convert the spatial object to a string.
     */
    override def toString: String = s"Topological ($s, $d)"

end Topological

