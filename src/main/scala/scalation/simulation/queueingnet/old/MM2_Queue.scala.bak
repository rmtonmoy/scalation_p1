
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Sun Dec 29 21:28:40 EST 2013
 *  @see     LICENSE (MIT style license file).
 *  @see     http://irh.inf.unideb.hu/~jsztrik/education/16/SOR_Main_Angol.pdf
 *
 *  @title   M/M/2 queue
 */

package scalation
package simulation
package queueingnet

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `MM2_Queue` class is used to solve single node Markovian Queueing problems.
 *  It models a service station consisting of one queue and '2' servers, i.e.,
 *  an M/M/2 queue.  The arrivals are Poisson and the service time distribution
 *  is Exponential.
 *------------------------------------------------------------------------------
 *  @see also `MMck_Queue` to model finite capacity queues.
 *  @see also `MGc_Queue` to model queues with general service time distributions.
 *------------------------------------------------------------------------------
 *  @param lambda  the overall arrival rate
 *  @param mu      the per unit service rate
 */
class MM2_Queue (lambda: Double, mu: Double):

    val p = lambda / (2 * mu)                   // traffic intensity

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Probability system is empty.
     */
    def pi_0: Double = (1 - p) / (1 + p)

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Expected length/number in sYstem.
     */
    val l_y = (2 * p) / (1 - p~^2) 

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Expected length/number in Service.
     */
    val l_s = lambda / mu

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Expected length of the waiting queue.
     */
    val l_q = l_y - l_s

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Expected time in the sYstem, Service and Queue.
     */
    val (t_y, t_s, t_q) = (l_y / lambda, l_s / lambda, l_q / lambda)

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** View/check intermediate results.
     */
    def view (): Unit =
        println ("Check queueing parameters:")
        println ("lambda = %g".format (lambda))                   // arrival rate
        println ("mu     = %g".format (mu))                       // service rate
        println ("2      = %d".format (2))                        // number of servers
        println ("p      = %g".format (p))                        // traffic intensity (rho)
        println ("pi_0   = %g".format (pi_0))                     // probability it is empty
    end view

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Report the results.
     */
    def report (): Unit =
        println ("Results for queue:")
        println ("---------------------------------------------------")
        println ("|  Queue    |  l_q = %8.4g".format (l_q) + "  |  t_q = %8.4g".format (t_q) + "  |")
        println ("|  Service  |  l_s = %8.4g".format (l_s) + "  |  t_s = %8.4g".format (t_s) + "  |")
        println ("|  sYstem   |  l_y = %8.4g".format (l_y) + "  |  t_y = %8.4g".format (t_y) + "  |")
        println ("---------------------------------------------------")
        println ("After time unit coversion")
        println (s"t_q = ${60*t_q}, t_s = ${60*t_s}, t_y = ${60*t_y}")
    end report

end MM2_Queue


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `mM2_QueueTest` main function is used to test the `MM2_Queue` class.
 *  > runMain scalation.simulation.queueingnet.mM2_QueueTest
 */
@main def mM2_QueueTest (): Unit =

    val lambda = 12.0                                      // customer arrival rate (per hour)
    val mu     =  7.5                                      // customer service rate (per hour)

    println("\nM/M/2 Queue Results:")
    val mm2 = new MM2_Queue (lambda, mu)               // M/M/2 Queue
    mm2.view ()
    mm2.report ()

end mM2_QueueTest

