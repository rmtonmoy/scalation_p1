
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Sun Feb 13 16:22:21 EST 2022
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   Model: Regression for Time Series
 */

package scalation
package modeling
package forecasting

import scalation.mathstat._

//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Regression4TS` object supports regression for Time Series data.
 *  Given a response vector y, and a predictor matrix x is built that consists of
 *  lagged y vectors.
 *      y_t = b dot x
 *  where x = [y_{t-1}, y_{t-2}, ... y_{t-lag}].
 */
object Regression4TS:

    private val debug   = debugf ("Regression4TS", true)                  // debug function
    private val flaw    = flawf ("Regression4TS")                         // flaw function
    private val MISSING = -0.0                                            // missing value

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create a `Regression` object from a response vector.  The input/data matrix
     *  x is formed from the lagged y vectors as columns in matix x.
     *  @param y           the original un-expanded output/response vector
     *  @param lag         the maximum lag included (inclusive)
     *  @param hparam      the hyper-parameters (use Regression.hp for default)
     */
    def apply (y: VectorD, lag: Int,
               hparam: HyperParameter = Regression.hp): Regression =
        var (x, yy) = buildMatrix4TS (y, lag)                             // column for each lag
        x = VectorD.one (yy.dim) +^: x                                    // add first column of all ones

        debug ("apply", s" x = $x \n yy = $yy")
        val mod = new Regression (x, yy, null, hparam)
        mod.modelName = s"Regression4TS_$lag"
        mod
    end apply

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Forecast h steps ahead using the recursive method, returning forecasts in
     *  matrix yf with columns: [1-step, 2-steps, ... h-steps].
     *  @param yp  the predicted response vector (horizon 1 forecasts)
     *  @param h   the forecasting horizon
     */
    def forecast (mod: Regression, yp: VectorD, h: Int): MatrixD =
        val xx = mod.getX                                                 // get the predictor matrix
        val b  = mod.parameter                                            // get the model parameters
        val b_ = b(1 until b.dim)                                         // paramters excluding intercept

        val yf   = new MatrixD (yp.dim, h)                                // matrix to hold forecasts
        yf(?, 0) = yp                                                     // column 0 is predicted values
        for k <- 1 until h do                                             // forecast into future: columns 1 to h-1
            for i <- yf.indices do
                val xy = xx(i)(k+1 until xx.dim2) ++ yf(i)(0 until k)     // last from xx ++ first from yf
//              println (s"xy = $xy")
                yf(i, k) = b(0) + (b_ dot xy)                             // record forecasted value
            end for
        end for
        yf
    end forecast

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create a `Regression` object that uses multiple regression to fit a quadratic
     *  surface to Time Series data.
     *  @param y       the original un-expanded output/response vector
     *  @param lag     the maximum lag included (inclusive)
     *  @param hparam  the hyper-parameters ((use Regression.hp for default)
     */
    def quadratic (y: VectorD, lag: Int, 
                   hparam: HyperParameter = Regression.hp): Regression =
        var (x, yy) = buildMatrix4TS (y, lag)                             // column for each lag
        val xx = new MatrixD (x.dim, 2*x.dim2+1) 
        xx(?, 0) = VectorD.one (yy.dim)                                   // add first column of all ones
        for j <- x.indices2 do                                            // add terms in an interleaved fashion
            xx(?, 2*j+1) = x(?, j)                                        // linear terms
            xx(?, 2*j+2) = x(?, j)~^2                                     // add quadratic terms
        end for

        debug ("quadratic", s" xx = $xx \n yy = $yy")
        val mod = new Regression (xx, yy, null, hparam)
        mod.modelName = s"Regression4TS.quadratic$lag"
        mod
    end quadratic

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Forecast h steps ahead using the recursive method, returning forecasts in
     *  matrix yf with columns: [1-step, 2-steps, ... h-steps].
     *  @param yp  the predicted response vector (horizon 1 forecasts)
     *  @param h   the forecasting horizon
     */
    def forecastq (mod: Regression, yp: VectorD, h: Int): MatrixD =
        val xx = mod.getX                                                 // get the predictor matrix
        val b  = mod.parameter                                            // get the model parameters
        val b_ = b(1 until b.dim)                                         // paramters excluding intercept

        val yf   = new MatrixD (yp.dim, h)                                // matrix to hold forecasts
        yf(?, 0) = yp                                                     // column 0 is predicted values
        for k <- 1 until h do                                             // forecast into future: columns 1 to h-1
            for i <- yf.indices do
                val xi = xx(i)
                val yi = yf(i)
                var sum = b(0)
                var l = 0
                for j <- 1 until b.dim-1 by 2 do                          // add terms in an interleaved fashion
                    if j+k+1 < b.dim then
                        sum += b(j) * xi(j+k)                             // linear terms
                        sum += b(j+1) * xi(j+k+1)                         // add quadratic terms
                    else
                        sum += b(j) * yi(l)
                        sum += b(j+1) * yi(l)~^2
                        l += 1
                    end if
                end for
                yf(i, k) = sum                                            // record forecasted value
            end for
        end for
        yf
    end forecastq

end Regression4TS

import Regression4TS._

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `regression4TSTest` main function tests the `Regression4TS` class.
 *  This test is used to CHECK that the buildMatrix4TS function is working correctly.
 *  May get NaN for some maximum lags (p) due to multi-collinearity.
 *  > runMain scalation.modeling.forecasting.regression4TSTest
 */
@main def regression4TSTest (): Unit =

    val m = 30
    val y = VectorD.range (1, m)                                       // used to CHECK the buildMatrix4TS function

    for p <- 1 to 10 do                                                // autoregressive hyper-parameter p
        banner (s"Test: Regression4TS with $p lags")
        val mod = Regression4TS (y, p)                                 // create model for time series data
        mod.trainNtest ()()                                            // train the model on full dataset
        println (mod.summary)

        val yp = mod.predict (mod.getX)
        new Plot (null, mod.getY, yp, s"y vs. yp for ${mod.modelName} with $p lags", lines = true)
    end for

end regression4TSTest


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `regression4TSTest2` main function tests the `Regression4TS` class on real data:
 *  Forecasting lake levels.
 *  Test the test, predictAll, testForecast and forecastAll methods over the whole times-series.
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting.regression4TSTest2
 */
@main def regression4TSTest2 (): Unit =

    import Example_LakeLevels.y
    val m = y.dim
    val h = 3                                                          // the forecasting horizon

    for p <- 1 to 8 do                                                 // autoregressive hyper-parameter p
        banner (s"Test: Regression4TS with $p lags")
        val mod = Regression4TS (y, p)                                 // create model for time series data
        mod.trainNtest ()()                                            // train the model on full dataset
        println (mod.summary)                                          // parameter/coefficient statistics

        banner ("Predictions")
        val yy = mod.getY                                              // trimmed actual response vector
        val yp = mod.predict (mod.getX)                                // predicted response vector
        new Plot (null, mod.getY, yp, s"y vs. yp for ${mod.modelName} with $p lags", lines = true)
        println (s"yp = $yp")

        banner ("Forecasts")
        val yf = forecast (mod, yp, h)                                 // forecasted response matrix
        for k <- yf.indices2 do
            new Plot (null, yy, yf(?, k), s"yy vs. yf_$k for ${mod.modelName} with $p lags", lines = true)
        end for
        println (s"yf = $yf")
        println (s"yf.dims = ${yf.dims}")
        assert (yf(?, 0) == yp)                                        // first forecast = predicted values

        println (testForecast (mod, y, yf, p))                         // QoF
    end for

end regression4TSTest2


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `regression4TSTest3` main function tests the `Regression4TS` class on real data:
 *  Forecasting lake levels.  Uses quadratic regression.
 *  Test the test, predictAll, testf and forecastAll methods over the whole times-series.
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting.regression4TSTest3
 */
@main def regression4TSTest3 (): Unit =

    import Example_LakeLevels.y
    val m = y.dim
    val h = 3                                                          // the forecasting horizon

    for p <- 1 to 1 do                                                 // autoregressive hyper-parameter p
        banner (s"Test: Regression4TS with $p lags")
        val mod = Regression4TS.quadratic (y, p)                       // create model for time series data
        mod.trainNtest ()()                                            // train the model on full dataset
        println (mod.summary)                                          // parameter/coefficient statistics

        banner ("Predictions")
        val yy = mod.getY                                              // trimmed actual response vector
        val yp = mod.predict (mod.getX)
        new Plot (null, mod.getY, yp, s"y vs. yp for ${mod.modelName} with $p lags", lines = true)
        println (s"yp = $yp")

        banner ("Forecasts")
        val yf = forecastq (mod, yp, h)                                 // forecasted response matrix
        for k <- yf.indices2 do
            new Plot (null, yy, yf(?, k), s"yy vs. yf_$k for ${mod.modelName} with $p lags", lines = true)
        end for
        println (s"yf = $yf")
        println (s"yf.dims = ${yf.dims}")
        assert (yf(?, 0) == yp)                                        // first forecast = predicted values

        println (testForecast (mod, y, yf, p))                         // QoF

//      println (Fit.fitMap (mod.testf (k, y)))                        // evaluate k-units ahead forecasts
    end for

end regression4TSTest3

