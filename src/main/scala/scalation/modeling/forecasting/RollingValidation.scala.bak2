
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Wed Jun 17 12:08:35 EDT 2020
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   Model Framework: Rolling Validation for Forecasters
 */

package scalation
package modeling
package forecasting

import scalation.mathstat._

import Fit._

//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** Chop the testing te and training tr datasets out of the full dataset
 *  for rolling validation where the training set is before the testing set.
 *  @param x        the full data/input matrix
 *  @param y        the full response/output vector
 *  @param te       the start (inclusive) of the testing region
 *  @param te_size  the size of the testing region
 *  @param tr_size  the size of the training region
 */
def chopr (x: MatrixD, y: VectorD, te: Int, te_size: Int, tr_size: Int):
          (MatrixD, VectorD, MatrixD, VectorD) =
    val DEBUG = true                                                // debug flag
    
    val te2 = te + te_size                                          // end (exclusive) of testing region
    val tr  = te - tr_size                                          // start of training region
    
    val x_e = x(te until te2)                                       // testing data/input matrix
    val y_e = y(te until te2)                                       // testing response/output vector
    val x_  = x(tr until te)                                        // training data/input matrix
    val y_  = y(tr until te)                                        // training response/output vector
    
    if DEBUG then
        println (s"chopr:test:  x_e($te .. ${te2 - 1})")
        println (s"chopr:test:  y_e($te .. ${te2 - 1})")
        println (s"chopr:train: x_($tr .. ${te - 1})")
        println (s"chopr:train: y_($tr .. ${te - 1})")
    end if
    
    (x_e, y_e, x_, y_)
end chopr


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** Chop the testing te and training tr datasets out of the full dataset
 *  for rolling validation where the training set is before the testing set.
 *  This version works for models without an x componenet, only y.
 *  @param y        the full response/output vector
 *  @param te       the start (inclusive) of the testing region
 *  @param te_size  the size of the testing region
 *  @param tr_size  the size of the training region
 */
def chopr (y: VectorD, te: Int, te_size: Int, tr_size: Int):
          (VectorD, VectorD) =
    val DEBUG = true                                                // debug flag

    val te2 = te + te_size                                          // end (exclusive) of testing region
    val tr  = te - tr_size                                          // start of training region

    val y_e = y(te until te2)                                       // testing response/output vector
    val y_  = y(tr until te)                                        // training response/output vector

    if DEBUG then
        println (s"chopr:test:  y_e($te .. ${te2 - 1})")
        println (s"chopr:train: y_($tr .. ${te - 1})")
    end if

    (y_e, y_)
end chopr


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `RollingValidation` object provides k-fold rolling-validation, e.g.,
 *  for TR_RATIO = 0.5, m = 1000 and k = 10 the folds are defined as follows:
 *      0: tr(ain)   0 until 500, te(st) 500 until  550 
 *      1: tr(ain)  50 until 550, te(st) 550 until  600
 *      2: tr(ain) 100 until 600, te(st) 600 until  650
 *      3: tr(ain) 150 until 650, te(st) 650 until  700
 *      4: tr(ain) 200 until 700, te(st) 700 until  750
 *      5: tr(ain) 250 until 750, te(st) 750 until  800
 *      6: tr(ain) 300 until 800, te(st) 800 until  850
 *      7: tr(ain) 350 until 850, te(st) 850 until  900
 *      8: tr(ain) 400 until 900, te(st) 900 until  950
 *      9: tr(ain) 450 until 950, te(st) 950 until 1000
 *  In rolling validation for this case, each re-training set has 500 instances,
 *  and the testing set has 500 as well, with folds of length 50.
 *  Re-training occurs for every fold.
 */
object RollingValidation:

    private val debug    = debugf ("RollingValidation", true)                   // debug function
    private val flaw     = flawf ("RollingValidation")                          // debug function
    private val DEBUG2   = false                                                // verbose debug flag
    private val TR_RATIO = 0.5                                                  // min ratio train to full datasets

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Calculate the size (number of instances) for a training dataset.
     *  @param m  the size of the full dataset
     */
    def trSize (m: Int): Int = (m * TR_RATIO).toInt

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Use rolling-validation to compute test Quality of Fit (QoF) measures
     *  by dividing the dataset into a TESTING SET and a TRAINING SET.
     *  The test dataset is defined by a range of indices (test start until
     *  start + te_size) *  and the data before this is the training dataset.
     *  This version calls predict for one-step ahead out-of-sample forecasts.
     *  @param mod  the forecastering model being used (e.g., `ARIMA`)
     *  @param rc   the retraining cycle (number of forecasting until retraining occurs)
     */
    def rollValidate (mod: Forecaster & Fit, rc: Int): Unit =
        val y       = mod.getY                                                  // get the (opt. expanded) response/output vector
        val m       = y.dim                                                     // number of instances in full dataset
        val tr_size = trSize (m)                                                // size of each training set
        val te_size = m - tr_size                                               // size of each testing set

        debug ("rollValidate", s"m = $m, tr_size = $tr_size, te_size = $te_size, rc = $rc")

        val yp = new VectorD (te_size)                                          // y-predicted over testing set

        for i <- 0 until te_size do                                             // iterate through testing set
            val t = tr_size + i                                                 // next time point to forecast
            if i % rc == 0 then                                                 // retrain 0 until t, every rc forecasts
                val y_ = y(0 until t)                                           // slice out training set
                mod.train (null, y_)                                            // train on training set
            end if
            yp(i) = mod.predict (t-1, y)                                        // predict the next value
        end for

        val t  = VectorD.range (tr_size, m)                                     // relevant time range
        val yy = y(tr_size until m)                                             // actual response vector sliced
        val df = mod.parameter.size - 1                                         // degrees of freedom for model
        mod.resetDF (df, te_size - df)                                          // reset degrees of freedom
        new Plot (t, yy, yp, "Plot yy, yp vs. t", lines = true)
        println (FitM.fitMap (mod.diagnose (yy, yp), QoF.values.map (_.toString)))
    end rollValidate

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Use rolling-validation to compute test Quality of Fit (QoF) measures
     *  by dividing the dataset into a TESTING SET and a TRAINING SET.
     *  The test dataset is defined by a range of indices (test start until
     *  start + te_size) and the data before this is the training dataset.
     *  This version calls forecast for h-steps ahead out-of-sample forecasts.
     *  @param mod  the forecastering model being used (e.g., `ARIMA`)
     *  @param rc   the retraining cycle (number of forecasting until retraining occurs)
     *  @param h    the forecasting horizon (h-steps ahead)
     */
    def rollValidate (mod: Forecaster & Fit, rc: Int, h: Int): Unit =
        val y       = mod.getY                                                  // get the (opt. expanded) response/output vector
        val yf      = mod.forecastAll (y, h)                                    // get the in-sample forecasting matrix
        val m       = y.dim                                                     // number of instances in full dataset
        val tr_size = trSize (m)                                                // size of each training set
        val te_size = m - tr_size                                               // size of each testing set

        debug ("rollValidate", s"m = $m, tr_size = $tr_size, te_size = $te_size, rc = $rc, h = $h")

        val yp = new VectorD (te_size)                                          // y-predicted over testing set (only for h=1)

        for i <- 0 until te_size do                                             // iterate through testing set
            val t = tr_size + i                                                 // next time point to forecast
            if i % rc == 0 then                                                 // retrain 0 until t, every rc forecasts
                val y_ = y(0 until t)                                           // slice out training set
                mod.train (null, y_)                                            // train on training set
            end if
            yp(i)  = mod.predict (t-1, y)                                       // predict the next value (only for h=1)
            val yd = mod.forecast (t-1, yf, y, h)                               // forecast the next h-values
                                                                                // yf is updated down its diagonals
            debug ("rollValidate", s"for (i, t) = ($i, $t): yp($i) = ${yp(i)},  yd = $yd")
            assert (yp(i) =~ yd(0))                                             // make sure h=1 forecasts agree with predictions
        end for                                                                 // yf is updated down its diagonals

        val t  = VectorD.range (tr_size, m)                                     // relevant time ranmge
        val yy = y(tr_size until m)                                             // actual response vector trimed
        val df = mod.parameter.size - 1                                         // degrees of freedom for model
        mod.resetDF (df, te_size - df)                                          // reset degrees of freedom
        new Plot (t, yy, yp, s"Plot yy, yp vs. t (h = 1)", lines = true)

        for k <- 1 to h do
            val yfh = yf(tr_size until m, k)
            new Plot (t, yy, yfh, s"Plot yy, yfh vs. t (h = $k)", lines = true)
            println (FitM.fitMap (mod.diagnose (yy, yfh), QoF.values.map (_.toString)))
        end for

    end rollValidate

/*
        val cp = mod.cap                                                        // maximum lag (how far into the past)
        val st = te_size - cp                                                   // size of shift from original y
//      val yf = new MatrixD (te_size+cp+h, h+2)                                // extend before and after
        val yf = new MatrixD (y.dim+h, h+2)                                     // extend before and after
        for t <- 0 until te_size + cp do yf(t, 0) = y(st+t)                     // first column is the timestep (e.g., logical day)
//      for t <- yf.indices do yf(t, h+1) = te_size + t                         // last column is time (logical day)
        for t <- yf.indices do yf(t, h+1) = t                                   // last column is time (logical day)
*/

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Use kf-fold rolling-validation to compute test Quality of Fit (QoF) measures
     *  by dividing the dataset into a TESTING SET and a TRAINING SET.
     *  The test dataset is defined by a range of indices (test start until start + te_size)
     *  and tr_size of the data before this is the training dataset.
     *  Further, divide the testing set into k FOLDS and let the training set be the
     *  tr_size elements before each fold.  Call train, test and testF for each fold.
     *  @param mod  the forecastering model being used (e.g., `ARIMA`)
     *  @param kf   the number of testing folds
     *  @param h    the forecasting horizon, number of steps ahead to produce forecasts (defaults to 1)
     */
    def rollValidatek (mod: Forecaster & Fit, kf: Int = 10, h: Int = 1): Array [Statistic] =
        val y       = mod.getY                                                  // get the (opt. expanded) response/output vector
        val m       = y.dim                                                     // number of instances in full dataset
        val tr_size = trSize (m)                                                // size of each training set
        val te_size = m - tr_size                                               // size of each testing set
        val t1_size = te_size / kf                                              // size of each testing set fold

        debug ("rollValidatek", s"m = $m, tr_size = $tr_size, te_size = $te_size, kf = $kf, h = $h")

        if t1_size < h then flaw ("rollValidate", s"t1_size = $t1_size must be at least h = $h")

        val stats   = qofStatTable                                              // table of statistics for QoF measures
        var te      = tr_size                                                   // start of initial testing region
        var tef     = te                                                        // test start for fold 0

        for fold <- 0 until kf do                                               // iterate over each fold
            banner (s"rollValidatek: fold $fold test start tef = $tef")
            val (y_e, y_) = chopr (y, tef, t1_size, tr_size)                    // chop out testing and training regions
            mod.train (null, y_)                                                // train on training set
            val (yp, qof) = mod.test (null, y_)                                 // test predictions on in-sample testing
            println (mod.report (qof))                                          // report prediction Quality of Fit (QoF)

            val (yfh, qofh) = mod.testF (h, y_e)                                // test forecasts on testing set fold 
            println (mod.report (qofh))                                         // report forecast Quality of Fit (QoF)
            tallyQof (stats, qofh)
            tef += t1_size                                                      // start test start for next fold
        end for

        stats                                                                   // return the statistics table
    end rollValidatek

end RollingValidation


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `rollingValidationTest` main function is used to test the rollValidate method
 *  in the `RollingValidation` object.
 *  > runMain scalation.modeling.forecasting.rollingValidationTest
 */
@main def rollingValidationTest (): Unit =

    import scalation.random.Normal

    val m = 1200                                                                // number of instances
    val y = new VectorD (m)                                                     // response/output vector
    val e = Normal (0, 100)                                                     // noise

    y(0) = 50.0
    for i <- 1 until y.dim do y(i) = 0.8 * y(i-1) + e.gen

    val p = 3                                                                   // order of the model
    val h = 2                                                                   // forecasting horizon, try changing
    println (s"y.min = ${y.min}, y.max = ${y.max}")

    banner (s"AR full dataset results at forecasting horizon h = $h")

    ARMA.hp("p") = p
//  val mod = new AR (y)                                                        // create an AR(p) model
    val mod = new ARMA (y)                                                      // create an ARMA(p, 0) model

    mod.train (null, y)                                                         // train the model on full dataset
    val (yp, qof) = mod.test (null, y)                                          // test the model on full dataset
    println (mod.report (qof))                                                  // report on Quality of Fit (QoF)

    banner (s"AR rolling validation validation results at forecasting horizon h = $h")
    FitM.showQofStatTable (RollingValidation.rollValidatek (mod, h = h))

end rollingValidationTest


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `rollingValidationTest2` main function is used to test the rollValidate method
 *  in the `RollingValidation` object.
 *  > runMain scalation.modeling.forecasting.rollingValidationTest2
 */
@main def rollingValidationTest2 (): Unit =

    import Example_LakeLevels.y

    val p = 3                                                                   // order of the model
    val h = 2                                                                   // forecasting horizon, try changing
    println (s"y.min = ${y.min}, y.max = ${y.max}")

    banner (s"AR full dataset results at forecasting horizon h = $h")

    ARMA.hp("p") = p
//  val mod = new AR (y)                                                        // create an AR(p) model
    val mod = new ARMA (y)                                                      // create an ARMA(p, 0) model

    val (yp, qof) = mod.trainNtest ()()                                         // train-test model on full dataset

    val t = VectorD.range (49 until 97)                                         // note original y must be shifted
    new Plot (t, y(50 until 98), yp(49 until 97), "y, yp vs t 2nd half", lines = true)

    val rc = 2                                                                  // retrain cycle
    banner (s"AR($p) one-step ahead rolling validation results")
    RollingValidation.rollValidate (mod, rc)

    banner (s"AR($p) $h-steps rolling validation results")
    RollingValidation.rollValidate (mod, rc, h)

end rollingValidationTest2


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `rollingValidationTest3` main function is used to test the rollValidate method
 *  in the `RollingValidation` object.
 *  > runMain scalation.modeling.forecasting.rollingValidationTest3
 */
@main def rollingValidationTest3 (): Unit =

    val y = VectorD.range (1, 25)

    val h = 2                                                                   // forecasting horizon, try changing
    banner (s"RW full dataset results at forecasting horizon h = $h")
    val mod = new RandomWalk (y)                                                // create an RW model
    mod.train (null, y)                                                         // train the model on full dataset

    val (yp, qof) = mod.test (null, y)                                          // test the model on full dataset
    println (mod.report (qof))                                                  // report on Quality of Fit (QoF)
    println (s"yp = $yp")                                                       // print prediction matrix

    val yf = mod.forecastAll (y, h)                                             // produce all foreacts up horizon h
    println (s"yf = $yf")                                                       // print forecast matrix

    banner (s"RW rolling validation validation results at forecasting horizon h = $h")
    FitM.showQofStatTable (RollingValidation.rollValidatek (mod, 3, h))

end rollingValidationTest3

